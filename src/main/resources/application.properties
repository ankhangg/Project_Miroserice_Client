spring.datasource.url=jdbc:sqlserver://localhost;database=Client_Employee;
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.username=ankhang
spring.datasource.password=luudangankhang

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
spring.jpa.hibernate.ddl-auto=update
#show sql
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.application.name=employee-app
server.port= 8080
server.servlet.context-path=/employee-app

info.url=http://localhost:8081/info-app

#info-app.ribbon.listOfServers=http://localhost:8082,http://localhost:8081

#eureka.client.service-url.defaultZone=http://localhost:5000/eureka/
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:5000/eureka



management.info.env.enabled=true

#config info # can set what ever thing in hear
info.app.name=Microservice_Cilent_AnKhang
info.app.description=Luu Dang An Khang Author
info.app.version=2806

#config actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j Properties
#clientcall -> can set any name you like
resilience4j.circuitbreaker.instances.clientcall.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.clientcall.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.clientcall.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.clientcall.slidingWindowSize=5
resilience4j.circuitbreaker.instances.clientcall.failureRateThreshold=50
resilience4j.circuitbreaker.instances.clientcall.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.clientcall.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.clientcall.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties (just wait for the response 3 second and then timeout) #can use the same way
resilience4j.timelimiter.instances.clientcall.timeout-duration=3s
#resilience4j.timelimiter.instances.clientcall.timeoutDuration=3000ms

#Resilience4J Retry Properties
#max-attempts => 3 time retry call the method
#wait-duration => time waiting for the next retry
resilience4j.retry.instances.clientcall.max-attempts=3
resilience4j.retry.instances.clientcall.wait-duration=5s

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=InfoModelTopicKafka:com.ankhang.model.InfoModelTopicKafka


logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#jwt.issuer-uri => find the public key needed to verify the signature of the JWT
#jwt.jwk-set-uri => find the collection of public keys that are used to verify the signature
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-microservices-realm
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/spring-boot-microservices-realm/protocol/openid-connect/certs

#case use authorization_code oAuth2 Account Keyclock
spring.security.oauth2.client.registration.keycloak.client-id=spring-cloud-client-test-account
spring.security.oauth2.client.registration.keycloak.client-secret=dCPCBA41LI6LxkQFfpQxK0PfP5LYxghl
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#dont set port to use load balenced #need config like this in keyclock server
spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:/employee-app/login/oauth2/code/spring-cloud-client-test-account


#case config to call another server to get authen oAuth2 Keyclock Client Credentials
spring.security.oauth2.client.registration.spring-cloud-client.client-id=spring-cloud-client
spring.security.oauth2.client.registration.spring-cloud-client.client-secret=wty2SX7iA2K6MWhKQv1aoUGG6gYd5W4m
spring.security.oauth2.client.registration.spring-cloud-client.scope=openid, profile, roles
spring.security.oauth2.client.registration.spring-cloud-client.authorization-grant-type=client_credentials
#dont set port to use load balenced #need config like this in keyclock server
spring.security.oauth2.client.registration.spring-cloud-client.redirect-uri=http://localhost:/employee-app/login/oauth2/code/spring-cloud-client
spring.security.oauth2.client.registration.spring-cloud-client.provider=keycloak

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8181/realms/spring-boot-microservices-realm
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8181/realms/spring-boot-microservices-realm/protocol/openid-connect/token




